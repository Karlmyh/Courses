cor(Credit[1],Credit[2])
cor(Credit[1:4])
cor(Credit[1:7])
corrplot(Credit[1:4])
corrplot(Credit[1:4])
dimnames(Credit[1:7])
dimnames(Credit[1:7])[2]
length(dimnames(Credit[1:7])[2])
length(dimnames(Credit[1:7])[[2]])
corrplot(corr(Credit[1:7]))
corrplot(cor(Credit[1:7]))
pairs(Credit)
linreg<-function(){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
result<-predict(lmodel,test)
result[result<0]=0
par(mfrow=c(2,2))
plot(result)
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
linreg()
linreg<-function(){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
linreg()
??lm
help(lm)
linreg<-function(){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
linreg()
library(ISLR)
library(corrplot)
data("Credit")
str(Credit)
corrplot(cor(Credit[1:7]))
pairs(Credit)
linreg<-function(){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
linreg()
linreg<-function(){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
linreg()
plot(pressure)
corrplot(cor(Credit[c(1:7,12)]))
colnames(Credit)
corrplot(cor(Credit[c(1:7,12)]),sig.level = .05)
corrplot(cor(Credit[c(1:7,12)]),p.mat = .05,sig.level = .05)
corrplot(cor(Credit[c(1:7,12)]),sig.level = .01)
corrplot(cor(Credit[c(1:7,12)]),sig.level = .001)
corrplot(cor(Credit[c(1:7,12)]),sig.level = .000001)
corrplot(cor(Credit[c(1:7,12)]),sig.level = .01)
res1 <- cor.mtest(Credit[c(1:7,12)], conf.level = 0.95)
corrplot(cor(Credit[c(1:7,12)]),sig.level = .01,p.mat = res1$p)
res1 <- cor.mtest(Credit[c(1:7,12)], conf.level = 0.95)
corrplot(cor(Credit[c(1:7,12)]),sig.level = .05,p.mat = res1$p)
validate<-lm(Balance~Married,data=Credit)
summary(validate)
validate<-lm(Balance~Ethnicity,data=Credit)
summary(validate)
validate<-lm(Balance~Married,data=Credit)
summary(validate)
validate<-lm(Balance~Age,data=Credit)
summary(validate)
validate<-lm(Balance~Cards,data=Credit)
summary(validate)
validate<-lm(Balance~Education,data=Credit)
summary(validate)
linreg<-function(modeltype){
if(modeltype==1){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
else(modeltype==2){
linreg<-function(modeltype){
if(modeltype==1){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
else if(modeltype==2){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Gender+Married+Student+Ethnicity,training)
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
}
linreg<-function(modeltype){
if(modeltype==1){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
else if(modeltype==2){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Gender+Married+Student+Ethnicity,training)
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
else if(modeltype==3){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
lmodel=step(lmodel)
print(confint(lmodel,level = 0.95))
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
}
linreg(3)
linreg<-function(modeltype){
if(modeltype==1){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
else if(modeltype==2){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Gender+Married+Student+Ethnicity,training)
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
else if(modeltype==3){
training=Credit[1:250,]
test=Credit[251:400,]
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
print(step(lmodel))
lmodel=step(lmodel)
print(confint(lmodel,level = 0.95))
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
}
linreg(3)
lmodel=lm(Balance ~ *,training)
lmodel=lm(Balance ~ .,training)
lmodel=lm(Balance ~ .,training)
summary(lmodel)
lmodel=lm(Balance ~ .*,training)
lmodel=lm(Balance ~ .+*,training)
lmodel=lm(Balance ~ .+..,training)
lmodel=lm(Balance ~ ..,training)
lmodel=lm(Balance ~ .,training)
summary(lmodel)
abline(lmodel)
lmodel1<-lm(Balance~Age,data=Credit)
abline(lmodel1)
plot(Credit$Balance,Credit$Age)
abline(lmodel1)
plot(Credit$Balance,Credit$Age)
abline(lmodel1)
table(Credit$Balance)
for (i in c(2:7,12)){
ad.test(Credit[i])
}
for (i in c(2:7,12)){
shapiro.test(Credit[i])
}
for (i in c(2:7,12)){
shapiro.test(as.numeric(Credit[i]))
}
Credit[1]
Credit[3]
as.numeric(Credit[3])
Credit[[3]]
for (i in c(2:7,12)){
shapiro.test(Credit[[i]])
}
for (i in c(2:7,12)){
print(shapiro.test(Credit[[i]]))
}
library(ggplot2)
#par(mfrow=c(1,7))
ggplot(Credit, aes(x = Age)) +
# 直方图函数：binwidth设置组距
geom_histogram(binwidth = 5, fill = "lightblue", colour = "black")
x=sample(1:100,70,rep=T)
x=c(x,c(220,222))
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
Credit[[3]]
Credit[[12]]
table(Credit[[12]])
x=Credit[[12]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
x=Credit[[1]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
x=Credit[[2]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
x=Credit[[3]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
x=Credit[[4]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
windows(width=8,height=24)
windows(width=8,height=24)
#windows(width=8,height=24)
par(mfrow=c(6,2))
for (i in 1:12){
x=Credit[[i]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
}
x=Credit[[4]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
windows(width=8,height=4)
window(width=8,height=4)
par(mfrow=c(6,2))
for (i in 1:12){
x=Credit[[i]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
}
par(mfrow=c(2,6))
for (i in 1:12){
x=Credit[[i]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
}
par(mfrow=c(6,2))
for (i in 1:12){
x=Credit[[i]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
}
par(mfrow=c(6,2))
for (i in 1:12){
x=Credit[[i]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
}
par(mfrow=c(6,2))
for (i in 1:12){
x=Credit[[i]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
}
par(mfrow=c(2,6))
for (i in 1:12){
x=Credit[[i]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
}
par(mfrow=c(3,4))
for (i in 1:12){
x=Credit[[i]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
}
x=Credit[[8]]
hist(x,probability=T)
par(mfrow=c(4,2))
for (i in c(2:7,12){
par(mfrow=c(4,2))
for (i in c(2:7,12)){
x=Credit[[i]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
}
par(mfrow=c(3,3))
for (i in c(2:7,12)){
x=Credit[[i]]
hist(x,probability=T)
d<-density(x, bw = "sj")
lines(d,col="blue")
}
plot(Credit$Balance,Credit$Income)
plot(Credit$Balance,Credit$Age)
plot(Credit$Balance,Credit$Limit)
pairs(Credit[c(2:7,12)])
par(mfrow=c(3,2))
for (i in c(2:7)){
plot(Credit[[12]],Credit[[i]])
}
# separating data set
training=Credit[1:250,]
test=Credit[251:400,]
test
training0<-training[training$Balance==0]
training0<-training[training$Balance==0,]
training0
length(training0)
training1<-training[training$Balance>0,]
training1
length(training1)
length(training1[[1]])
training
class(training)
class(training1)
training$Balance
# The regression-test function filed up for further call
linreg<-function(type,training,test,training0=0){
# regress everything
if (type=="simple"){
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
# squared residue
error=result-test$Balance
error=error*error
# divided by degree of freedom
sum(error)/length(error)
}
else if(type=="select"){
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
#using step variable selection
lmodel=step(lmodel)
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
else if(type=="cutoff"){
# now training set is actually training_1
lmodel=lm(Balance ~    Income+Limit+Rating+Cards+Age+Education+Gender+Married+Student+Ethnicity,training)
lmodel=step(lmodel)
print(confint(lmodel))
print(summary(lmodel))
par(mfrow=c(2,2))
plot(lmodel)
# validate how well training_0 is predicted
validate<-predict(lmodel,training0)
validate[validate<0]=0
# print rate of correction
print(length(validate[validate==0])/length(validate))
result<-predict(lmodel,test)
result[result<0]=0
error=result-test$Balance
error=error*error
sum(error)/length(error)
}
}
lmodel
lmodel$residuals
predict(test,lmodel)
predict(lmodel,test)
testmodel<-predict(lmodel,test)
testmodel[1]
summary(testmodel)
lmodel$call
lmodel$model
lmodel$coefficients
lmodel$effects
lmodel$rank
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
training
source('~/.active-rstudio-document')
summary(lmodel)
Credit$Balance
error
install.packages("TSA")
install.packages("forcast")
install.packages("zoo")
install.packages("forecast")
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
install.packages("e1071")
library(e1071)
library("e1071")
setwd("/Users/mayuheng/Desktop/pattern recognition/hw3/dataset")
read.csv("a1a.txt")
data<-read.csv("a1a.txt")
data
data[1]
class(data)
data[1]
data[1][1]
nrow(data)
ncol(data)
data<-read.csv("a1a.csv")
data
data[,1]
ncol(data)
